// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  role           String?
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Items {
  id                   Int                    @id @default(autoincrement())
  supplierId           Int // Foreign key for Suppliers
  brandId              Int // Foreign key for Brands
  unitId               Int
  desc1                String
  desc2                String
  desc3                String
  discount1            Float                  @default(0.0)
  discount2            Float                  @default(0.0)
  discount3            Float                  @default(0.0)
  discount4            Float                  @default(0.0)
  store                Float                  @default(0.0)
  cal1                 Float
  cal2                 Float
  cal3                 Float
  ws1                  Float
  ws2                  Float
  ws3                  Float
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  supplier             Suppliers              @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  brand                Brands                 @relation(fields: [brandId], references: [id], onDelete: Cascade)
  unit                 Units                  @relation(fields: [unitId], references: [id], onDelete: Cascade)
  inventories          Inventory[] // Relation to Inventory
  supplierTransactions SupplierTransactions[]
  CustmerTransactions  CustomerTransactions[]
}

model Suppliers {
  id            Int                @id @default(autoincrement())
  name          String
  address       String
  termId        Int
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  items         Items[]
  Invoices      SupplierInvoices[]
  CheckVouchers CheckVouchers[]
  Terms         Terms?             @relation(fields: [termId], references: [id], onDelete: Cascade)
}

model Brands {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Items[]
}

model Warehouses {
  id          Int                 @id @default(autoincrement())
  name        String
  location    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  inventories Inventory[] // Relation to Inventory
  Invoices    WarehouseInvoices[]
}

model Inventory {
  id                    Int                     @id @default(autoincrement())
  warehouseId           Int // Foreign key for Warehouse
  itemId                Int // Foreign key for Item
  count                 Int // Quantity of the item in the warehouse
  price                 Float                   @default(0.0)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  warehouse             Warehouses              @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  item                  Items                   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  SupplierTransactions  SupplierTransactions[]
  WarehouseTransactions WarehouseTransactions[]
}

model Units {
  id        Int      @id @default(autoincrement())
  name      String
  plural    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Items[]
}

// Customers
model Customers {
  id               Int                @id @default(autoincrement())
  name             String
  address          String
  termId           Int
  term             Terms              @relation(fields: [termId], references: [id], onDelete: Cascade)
  CustomerInvoices CustomerInvoices[]
  CounterReceits   CounterReceipts[]
}

model Terms {
  id        Int         @id @default(autoincrement())
  days      String
  Customers Customers[]
  Suppliers Suppliers[]
}

// Supplier Transactions
model SupplierTransactions {
  id          Int              @id @default(autoincrement())
  invoiceId   Int
  itemId      Int
  quantity    Int
  inventoryId Int
  inventory   Inventory        @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  item        Items            @relation(fields: [itemId], references: [id], onDelete: Cascade)
  invoice     SupplierInvoices @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model SupplierInvoices {
  id              Int                    @id @default(autoincrement())
  supplierId      Int                    @default(0)
  invoiceNumber   String
  invoiceDate     DateTime
  isfulfilled     Boolean                @default(false)
  totalAmount     Float                  @default(0.0)
  dateCreated     DateTime               @default(now())
  dateUpdated     DateTime               @updatedAt
  supplier        Suppliers              @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  Transactions    SupplierTransactions[]
  CheckVouchers   CheckVouchers?         @relation(fields: [checkVouchersId], references: [id], onDelete: Cascade)
  checkVouchersId Int?
}

model CustomerTransactions {
  id             Int              @id @default(autoincrement())
  invoiceId      Int
  itemId         Int
  customerPrice  Float
  storePrice     Float            @default(0)
  quantity       Int
  supplied       Int
  isDiscounted   Boolean          @default(true)
  isSpecialPrice Boolean          @default(false)
  invoice        CustomerInvoices @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  item           Items            @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model CustomerInvoices {
  id                  Int                    @id @default(autoincrement())
  customerId          Int                    @default(0)
  invoiceNumber       String
  invoiceDate         DateTime
  isfulfilled         Boolean                @default(false)
  isCompleted         Boolean                @default(false)
  totalAmount         Float                  @default(0.0)
  dateCreated         DateTime               @default(now())
  dateUpdated         DateTime               @updatedAt
  customer            Customers              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  CustmerTransactions CustomerTransactions[]
  CounterReceipts     CounterReceipts?       @relation(fields: [counterReceiptsId], references: [id], onDelete: Cascade)
  counterReceiptsId   Int?
}

model WarehouseTransactions {
  id          Int               @id @default(autoincrement())
  inventoryId Int
  invoiceId   Int
  count       Int
  Inventory   Inventory         @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  Invoice     WarehouseInvoices @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model WarehouseInvoices {
  id                    Int                     @id @default(autoincrement())
  targetWarehouseId     Int
  warehouseId           Int?
  isFullfilled          Boolean                 @default(false)
  dateCreated           DateTime                @default(now())
  dateUpdated           DateTime                @updatedAt
  Warehouses            Warehouses?             @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  WarehouseTransactions WarehouseTransactions[]
}

model CounterReceipts {
  id               Int                @id @default(autoincrement())
  totalAmount      Float
  dueDate          DateTime
  dateCreated      DateTime           @default(now())
  CustomerInvoices CustomerInvoices[]
  Customers        Customers?         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId       Int?
}

model CheckVouchers {
  id               Int                @id @default(autoincrement())
  discount         Float              @default(0.0)
  totalAmount      Float
  bank             String             @default("EASTWEST")
  checkNumber      String             @default("")
  dueDate          DateTime
  dateCreated      DateTime           @default(now())
  SupplierInvoices SupplierInvoices[]
  Supplier         Suppliers?         @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId       Int?
}
